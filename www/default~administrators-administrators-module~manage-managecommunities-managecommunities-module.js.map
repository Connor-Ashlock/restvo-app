{"version":3,"sources":["./src/app/pages/manage/administrators/administrators.page.html","./src/app/pages/manage/administrators/administrators.module.ts","./src/app/pages/manage/administrators/administrators.page.scss","./src/app/pages/manage/administrators/administrators.page.ts"],"names":[],"mappings":"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","file":"default~administrators-administrators-module~manage-managecommunities-managecommunities-module.js","sourcesContent":["export default \"<ion-header *ngIf=\\\"modalPage\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"closeModal()\\\"><ion-icon name=\\\"chevron-back-outline\\\"></ion-icon></ion-button>\\n    </ion-buttons>\\n    <ion-title>{{userData.user.churches[userData.currentCommunityIndex].name}}: Administrators</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  <div>To add administrator, go to Members, then click on the Member profile to change the admin status.</div>\\n  <ion-list *ngIf=\\\"churchService && churchService.currentManagedCommunity\\\">\\n    <ion-item *ngFor=\\\"let admin of churchService.currentManagedCommunity.admins\\\" (click)=\\\"editAdmin($event, admin)\\\">\\n      <ion-avatar slot=\\\"start\\\">\\n        <img *ngIf=\\\"admin.avatar\\\" [src]=\\\"admin.avatar\\\"/>\\n        <img *ngIf=\\\"!admin.avatar\\\" src=\\\"assets/img/avatar-default.jpg\\\"/>\\n      </ion-avatar>\\n      {{admin.first_name}} {{admin.last_name}}\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdministratorsPage } from './administrators.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdministratorsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [AdministratorsPage]\n})\nexport class AdministratorsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL21hbmFnZS9hZG1pbmlzdHJhdG9ycy9hZG1pbmlzdHJhdG9ycy5wYWdlLnNjc3MifQ== */\"","import {Component, Input, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ModalController} from \"@ionic/angular\";\nimport {UserData} from \"../../../services/user.service\";\nimport {Churches} from \"../../../services/church.service\";\nimport {ShowrecipientinfoPage} from \"../../connect/showrecipientinfo/showrecipientinfo.page\";\nimport {InvitetoconnectPage} from \"../../connect/invitetoconnect/invitetoconnect.page\";\n\n@Component({\n  selector: 'app-administrators',\n  templateUrl: './administrators.page.html',\n  styleUrls: ['./administrators.page.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AdministratorsPage implements OnInit {\n    @Input() modalPage: any;\n    refreshNeeded = false;\n    searchKeyword = '';\n    subscriptions: any = {};\n\n    constructor(\n        public modalCtrl: ModalController,\n        public userData: UserData,\n        public churchService: Churches,\n    ) { }\n\n    ngOnInit() {\n        this.subscriptions['refreshUserStatus'] = this.userData.refreshUserStatus$.subscribe(this.refreshHandler);\n    }\n\n    refreshHandler = (data) => {\n        if (data && data.type === 'load community ready'){\n            console.log(\"admins\", this.churchService.currentManagedCommunity.admins);\n        }\n    };\n\n    async editAdmin(event, admin) {\n        event.stopPropagation();\n        const recipientModal = await this.modalCtrl.create({component: ShowrecipientinfoPage, componentProps: {recipient: admin, modalPage: true}});\n        await recipientModal.present();\n        const {data: needsToRefresh} = await recipientModal.onDidDismiss();\n        if (needsToRefresh) {\n            this.userData.refreshUserStatus({type: 'refresh manage pag'});\n        }\n    }\n\n    async addAdmin() {\n        const recipientModal = await this.modalCtrl.create({component: InvitetoconnectPage, componentProps: {church: this.churchService.currentManagedCommunity, type: 'Restvo Users', modalPage: true}});\n        await recipientModal.present();\n        const {data: needsToRefresh} = await recipientModal.onDidDismiss();\n        if (needsToRefresh) {\n            this.userData.refreshUserStatus({type: 'refresh manage pag'});\n        }\n    }\n\n    closeModal(){\n        this.modalCtrl.dismiss(this.refreshNeeded);\n    }\n}\n"],"sourceRoot":"webpack:///"}