{"version":3,"sources":["./src/app/pages/discover/preferences/preferences.page.html","./src/app/pages/discover/preferences/preferences.page.scss","./src/app/pages/discover/preferences/preferences.page.ts"],"names":[],"mappings":"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","file":"default~about-about-module~dashboard-dashboard-module~discover-preferences-preferences-module~pages-~fd1aec84.js","sourcesContent":["export default \"<ion-header *ngIf=\\\"modalPage || showHeader\\\" id=\\\"preference-header\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"closeModal()\\\" id=\\\"clickback\\\"><ion-icon name=\\\"chevron-back-outline\\\"></ion-icon></ion-button>\\n    </ion-buttons>\\n    <ion-title *ngIf=\\\"organizer\\\">Onboarding Process</ion-title>\\n    <ion-title *ngIf=\\\"!organizer\\\">About Me</ion-title>\\n  </ion-toolbar>\\n  <!--<ion-toolbar>\\n    <ion-searchbar [(ngModel)]=\\\"searchKeyword\\\" debounce=\\\"500\\\" (ionChange)=\\\"executeSearch($event)\\\"></ion-searchbar>\\n  </ion-toolbar>-->\\n</ion-header>\\n\\n<ion-content>\\n    <ion-grid style=\\\"height: 100%\\\" *ngIf=\\\"ionSpinner\\\">\\n        <ion-row class=\\\"ion-justify-content-start ion-align-items-center\\\" style=\\\"height: 100%\\\">\\n            <ion-spinner name=\\\"dots\\\"></ion-spinner>\\n        </ion-row>\\n    </ion-grid>\\n  <ion-list *ngIf=\\\"organizer\\\">\\n    <ion-buttons class=\\\"ion-justify-content-center ion-margin-vertical\\\">\\n      <ion-button shape=\\\"round\\\" fill=\\\"solid\\\" color=\\\"primary\\\" size=\\\"small\\\" (click)=\\\"chooseOnboardingProcess($event)\\\">Add Onboarding Process</ion-button>\\n    </ion-buttons>\\n      <ion-list-header>\\n          <ion-label>Participants</ion-label>\\n      </ion-list-header>\\n        <ion-item *ngFor=\\\"let moment of moments\\\" (click)=\\\"openOnboardingProcess(moment)\\\" [hidden]=\\\"!moment.array_boolean[2]\\\">\\n          <ion-thumbnail slot=\\\"start\\\">\\n            <img *ngIf=\\\"moment.assets?.length\\\" [src]=\\\"moment.assets[0]\\\"/>\\n            <img *ngIf=\\\"!moment.assets.length\\\" src=\\\"assets/img/group-default.png\\\"/>\\n          </ion-thumbnail>\\n          <div>\\n            <ion-note *ngIf=\\\"!organizer\\\" style=\\\"font-style: italic\\\" class=\\\"ion-margin-bottom\\\">{{moment.program.matrix_string[0][0]}}</ion-note>\\n            <ion-label>\\n              <h2 class=\\\"ion-text-wrap\\\">{{moment.matrix_string[0][0]}}</h2>\\n            </ion-label>\\n          </div>\\n\\n          <ion-badge *ngIf=\\\"!moment.response\\\" [color]=\\\"momentService.loadIcon(moment.resource.field).color\\\" slot=\\\"end\\\">{{moment.resource['en-US'].value[0]}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Incomplete'\\\" color=\\\"warning\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Completed'\\\" color=\\\"tertiary\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <!--<ion-badge slot=\\\"end\\\">{{moment.members.length}}</ion-badge>-->\\n        </ion-item>\\n      <ion-list-header>\\n          <ion-label>Leaders</ion-label>\\n      </ion-list-header>\\n      <ion-item *ngFor=\\\"let moment of moments\\\" (click)=\\\"openOnboardingProcess(moment)\\\" [hidden]=\\\"!moment.array_boolean[4]\\\">\\n          <ion-thumbnail slot=\\\"start\\\">\\n              <img *ngIf=\\\"moment.assets?.length\\\" [src]=\\\"moment.assets[0]\\\"/>\\n              <img *ngIf=\\\"!moment.assets.length\\\" src=\\\"assets/img/group-default.png\\\"/>\\n          </ion-thumbnail>\\n          <div>\\n              <ion-note *ngIf=\\\"!organizer\\\" style=\\\"font-style: italic\\\" class=\\\"ion-margin-bottom\\\">{{moment.program.matrix_string[0][0]}}</ion-note>\\n              <ion-label>\\n                  <h2 class=\\\"ion-text-wrap\\\">{{moment.matrix_string[0][0]}}</h2>\\n              </ion-label>\\n          </div>\\n\\n          <ion-badge *ngIf=\\\"!moment.response\\\" [color]=\\\"momentService.loadIcon(moment.resource.field).color\\\" slot=\\\"end\\\">{{moment.resource['en-US'].value[0]}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Incomplete'\\\" color=\\\"warning\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Completed'\\\" color=\\\"tertiary\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <!--<ion-badge slot=\\\"end\\\">{{moment.members.length}}</ion-badge>-->\\n      </ion-item>\\n      <ion-list-header>\\n          <ion-label>Organizers</ion-label>\\n      </ion-list-header>\\n      <ion-item *ngFor=\\\"let moment of moments\\\" (click)=\\\"openOnboardingProcess(moment)\\\" [hidden]=\\\"!moment.array_boolean[3]\\\">\\n          <ion-thumbnail slot=\\\"start\\\">\\n              <img *ngIf=\\\"moment.assets?.length\\\" [src]=\\\"moment.assets[0]\\\"/>\\n              <img *ngIf=\\\"!moment.assets.length\\\" src=\\\"assets/img/group-default.png\\\"/>\\n          </ion-thumbnail>\\n          <div>\\n              <ion-note *ngIf=\\\"!organizer\\\" style=\\\"font-style: italic\\\" class=\\\"ion-margin-bottom\\\">{{moment.program.matrix_string[0][0]}}</ion-note>\\n              <ion-label>\\n                  <h2 class=\\\"ion-text-wrap\\\">{{moment.matrix_string[0][0]}}</h2>\\n              </ion-label>\\n          </div>\\n\\n          <ion-badge *ngIf=\\\"!moment.response\\\" [color]=\\\"momentService.loadIcon(moment.resource.field).color\\\" slot=\\\"end\\\">{{moment.resource['en-US'].value[0]}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Incomplete'\\\" color=\\\"warning\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Completed'\\\" color=\\\"tertiary\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <!--<ion-badge slot=\\\"end\\\">{{moment.members.length}}</ion-badge>-->\\n      </ion-item>\\n      <ion-list-header>\\n          <ion-label>Unused</ion-label>\\n      </ion-list-header>\\n      <ion-item *ngFor=\\\"let moment of moments\\\" (click)=\\\"openOnboardingProcess(moment)\\\" [hidden]=\\\"!(!moment.array_boolean[2] && !moment.array_boolean[3] && !moment.array_boolean[4])\\\">\\n          <ion-thumbnail slot=\\\"start\\\">\\n              <img *ngIf=\\\"moment.assets?.length\\\" [src]=\\\"moment.assets[0]\\\"/>\\n              <img *ngIf=\\\"!moment.assets.length\\\" src=\\\"assets/img/group-default.png\\\"/>\\n          </ion-thumbnail>\\n          <div>\\n              <ion-note *ngIf=\\\"!organizer\\\" style=\\\"font-style: italic\\\" class=\\\"ion-margin-bottom\\\">{{moment.program.matrix_string[0][0]}}</ion-note>\\n              <ion-label>\\n                  <h2 class=\\\"ion-text-wrap\\\">{{moment.matrix_string[0][0]}}</h2>\\n              </ion-label>\\n          </div>\\n\\n          <ion-badge *ngIf=\\\"!moment.response\\\" [color]=\\\"momentService.loadIcon(moment.resource.field).color\\\" slot=\\\"end\\\">{{moment.resource['en-US'].value[0]}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Incomplete'\\\" color=\\\"warning\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <ion-badge *ngIf=\\\"moment.response && moment.status === 'Completed'\\\" color=\\\"tertiary\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n          <!--<ion-badge slot=\\\"end\\\">{{moment.members.length}}</ion-badge>-->\\n      </ion-item>\\n    <ion-item-divider *ngIf=\\\"organizer\\\" class=\\\"ion-text-wrap\\\">\\n      Displaying {{moments.length}}&nbsp;<span *ngIf=\\\"moments.length <= 1\\\"> Onboarding process</span><span *ngIf=\\\"moments.length > 1\\\"> Onboarding processes</span>\\n    </ion-item-divider>\\n  </ion-list>\\n    <ion-list *ngIf=\\\"!organizer\\\">\\n        <ion-item *ngFor=\\\"let moment of moments\\\" (click)=\\\"openOnboardingProcess(moment)\\\">\\n            <ion-thumbnail slot=\\\"start\\\">\\n                <img *ngIf=\\\"moment.assets?.length\\\" [src]=\\\"moment.assets[0]\\\"/>\\n                <img *ngIf=\\\"!moment.assets.length\\\" src=\\\"assets/img/group-default.png\\\"/>\\n            </ion-thumbnail>\\n            <div>\\n                <ion-label *ngIf=\\\"!organizer\\\" >\\n                    <h2 class=\\\"ion-text-wrap\\\">{{moment.program.matrix_string[0][0]}}</h2>\\n                </ion-label>\\n                <ion-note style=\\\"font-style: italic\\\" class=\\\"ion-margin-top\\\">{{moment.matrix_string[0][0]}}</ion-note>\\n            </div>\\n\\n            <ion-badge *ngIf=\\\"!moment.response\\\" [color]=\\\"momentService.loadIcon(moment.resource.field).color\\\" slot=\\\"end\\\">{{moment.resource['en-US'].value[0]}}</ion-badge>\\n            <ion-badge *ngIf=\\\"moment.response && moment.status === 'Incomplete'\\\" color=\\\"warning\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n            <ion-badge *ngIf=\\\"moment.response && moment.status === 'Completed'\\\" color=\\\"tertiary\\\" slot=\\\"end\\\">{{moment.status}}</ion-badge>\\n            <!--<ion-badge slot=\\\"end\\\">{{moment.members.length}}</ion-badge>-->\\n        </ion-item>\\n        <ion-item-divider class=\\\"ion-text-wrap\\\">\\n            Displaying {{moments.length}}&nbsp;<span *ngIf=\\\"moments.length <= 1\\\"> About Me section</span><span *ngIf=\\\"moments.length > 1\\\"> About Me sections</span>\\n        </ion-item-divider>\\n    </ion-list>\\n      <ion-infinite-scroll position=\\\"bottom\\\" (ionInfinite)=\\\"loadMorePreferences($event)\\\">\\n        <ion-infinite-scroll-content></ion-infinite-scroll-content>\\n      </ion-infinite-scroll>\\n</ion-content>\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Rpc2NvdmVyL3ByZWZlcmVuY2VzL3ByZWZlcmVuY2VzLnBhZ2Uuc2NzcyJ9 */\"","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\nimport {\n  IonInfiniteScroll,\n  ModalController,\n  Platform,\n} from \"@ionic/angular\";\nimport {Location} from \"@angular/common\";\nimport {Storage} from \"@ionic/storage\";\nimport {Auth} from \"../../../services/auth.service\";\nimport {Chat} from \"../../../services/chat.service\";\nimport {UserData} from \"../../../services/user.service\";\nimport {Moment} from \"../../../services/moment.service\";\nimport {Resource} from \"../../../services/resource.service\";\nimport {ShowfeaturePage} from \"../../feature/showfeature/showfeature.page\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {PickfeaturePopoverPage} from \"../../feature/pickfeature-popover/pickfeature-popover.page\";\n\n@Component({\n  selector: 'app-preferences',\n  templateUrl: './preferences.page.html',\n  styleUrls: ['./preferences.page.scss'],\n})\nexport class PreferencesPage implements OnInit, OnDestroy {\n  @ViewChild(IonInfiniteScroll, {static: false}) infiniteScroll: IonInfiniteScroll;\n\n  @Input() modalPage: any;\n  @Input() showHeader: any;\n  @Input() programId: any; // the program ID\n  @Input() type: number; // 2: participants, 3: organizers, 4: leaders\n  @Input() organizer = false;\n\n  subscriptions: any = {};\n  moments = [];\n  ionSpinner = false;\n  pageNum: number = 0;\n  reachedEnd: boolean = false;\n  conversation: any;\n  members: any = [];\n  searchKeyword = '';\n  refreshNeeded = false;\n\n  constructor(\n      private route: ActivatedRoute,\n      private router: Router,\n      private location: Location,\n      private storage: Storage,\n      private platform: Platform,\n      private authService: Auth,\n      private chatService: Chat,\n      public userData: UserData,\n      public momentService: Moment,\n      private resourceService: Resource,\n      private modalCtrl: ModalController) {}\n\n  ngOnInit() {\n    // link the refreshUserStatus Observable with the refresh handler. It fires on subsequent user refreshes\n    this.subscriptions['refreshUserStatus'] = this.userData.refreshUserStatus$.subscribe(this.refreshUserStatusHandler);\n  }\n\n  refreshUserStatusHandler = () => {\n    if (!this.ionSpinner && this.userData && this.userData.user) { // after a user has modified the answer to the onboarding process questionniare. data is most likely { type: 'change aux data' }\n      this.setup();\n    }\n  }\n\n  setup() {\n    if (this.userData && this.userData.user) {\n      this.programId = this.programId || this.route.snapshot.paramMap.get('programId'); // the program ID\n      this.type = this.type || parseInt(this.route.snapshot.paramMap.get('type'), 10); // 2: participants, 3: organizers, 4: leaders\n      this.showHeader = this.showHeader || (this.route.snapshot.paramMap.get('showHeader') === 'true'); // 2: participants, 3: organizers, 4: leaders\n      this.organizer = this.organizer || JSON.parse(this.route.snapshot.paramMap.get('organizer'));\n      this.loadPreferences();\n    } else {\n      this.router.navigateByUrl('/app/discover');\n    }\n  }\n\n  // load Program onboarding processes\n  async loadPreferences() {\n    this.ionSpinner = true;\n    setTimeout(async () => {\n      this.infiniteScroll.disabled = false;\n      this.reachedEnd = false;\n      this.pageNum = 0;\n      this.moments = [];\n      this.loadMorePreferences({target: this.infiniteScroll});\n    }, 50);\n  }\n\n  async loadMorePreferences(event) {\n    try {\n      this.pageNum++;\n      if (!this.reachedEnd) {\n        let processes: any;\n        if (this.organizer) {\n          processes = await this.momentService.loadProgramOnboardActivities(this.programId, null, false);\n          this.reachedEnd = true;\n        } else {\n          processes = await this.momentService.loadUserPreferences(this.pageNum, this.programId, null);\n        }\n        this.ionSpinner = false;\n        if (!processes.length) {\n          this.reachedEnd = true;\n          event.target.disabled = true;\n        } else {\n          for (const process of processes) {\n            process.status = !process.response ? 'New' : (process.response.matrix_number.filter((c) => c.length > 5).length < process.resource.matrix_number[0].filter((c) => c === 40000 || c === 40020).length || process.response.matrix_string.filter((c) => c.length > 1 && c[1] && c[1].length > 0).length < process.resource.matrix_number[0].filter((c) => (c === 40010)).length) ? 'Incomplete' : 'Completed';\n            this.moments.push(process);\n          }\n          if (!this.organizer) {\n            // sort the list by program Name if it is showing all user's preferences\n            this.moments.sort((a, b) => {\n              if (a.program.matrix_string[0][0] < b.program.matrix_string[0][0]) { return -1; }\n              if (a.program.matrix_string[0][0] > b.program.matrix_string[0][0]) { return 1; }\n              return 0;\n            });\n          }\n        }\n        event.target.complete();\n      } else {\n        this.ionSpinner = false;\n        event.target.complete();\n      }\n    } catch (err) {\n      this.ionSpinner = false;\n    }\n  }\n\n  executeSearch(event) {\n    event.stopPropagation();\n    this.ionSpinner = true;\n    this.loadPreferences();\n  }\n\n  async openOnboardingProcess(moment) {\n    if (this.modalPage || this.platform.width() < 768) { // if regular user, show feature\n      const modal = await this.modalCtrl.create({ component: ShowfeaturePage, componentProps: { moment: moment, modalPage: true } });\n      await modal.present();\n      const {data: refreshNeeded} = await modal.onDidDismiss();\n      if (refreshNeeded) {\n        this.setup();\n      }\n    } else {\n      if (this.router.url.includes('app/user')) { // if opened from User -> About Me\n        this.router.navigate(['/app/user/activity/' + moment._id], { replaceUrl: false });\n      } else { // such case does not exist yet. User should always open from the User -> About Me\n        this.router.navigate(['/app/activity/' + moment._id], { replaceUrl: false });\n      }\n    }\n  }\n\n    async chooseOnboardingProcess(event) {\n      event.stopPropagation();\n      const modal = await this.modalCtrl.create({component: PickfeaturePopoverPage, componentProps: {title: 'Choose from Library', categoryId: '5e17acd47b00ea76b75e5a71', programId: this.programId, type: this.type, allowCreate: true, allowSwitchCategory: false, modalPage: true }});\n      await modal.present();\n      const {data: moments} = await modal.onDidDismiss();\n      if (moments && moments.length) {\n          for (const moment of moments) {\n            // prepare object for cloning. copy everything except calendar and add program and onboarding types\n            moment.calendar = { // reset the calendar\n              title: moment.matrix_string[0][0],\n              location: '',\n              notes: '',\n              startDate: new Date().toISOString(),\n              endDate: new Date().toISOString(),\n              options: {\n                firstReminderMinutes: 0,\n                secondReminderMinutes: 0,\n                reminders: []\n              }\n            };\n            moment.program = this.programId;\n            if (this.type && moment.array_boolean.length > this.type) {\n              moment.array_boolean[this.type] = true;\n            }\n          }\n          const clonedMoments: any = await this.momentService.clone(moments, null); // clone the array of selected activities from Picker\n          for (const clonedMoment of clonedMoments) {\n              const index = moments.map((moment) => moment.resource._id).indexOf(clonedMoment.resource);\n              if (index > -1) {\n                 clonedMoment.resource = moments[index].resource; // clone the populated resource\n              }\n          }\n          this.moments.unshift(...clonedMoments);\n      }\n    }\n\n  closeModal() {\n    if (this.modalPage) {\n      // because Preference page is started by EditMoment via event listener and not via modalCtrl (hence it can't return the refreshNeeded obj back to EditMoment), it is necessary to publish a 'RefreshUserStatus' event to update EditMoment\n      if (this.refreshNeeded) {\n        this.userData.refreshUserStatus({});\n      }\n      this.modalCtrl.dismiss(this.refreshNeeded);\n    } else {\n      this.location.back();\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscriptions['refreshUserStatus'].unsubscribe(this.refreshUserStatusHandler);\n  }\n}\n"],"sourceRoot":"webpack:///"}