{"version":3,"sources":["./src/app/pages/user/notifications/notifications.page.html","./src/app/pages/user/notifications/notifications.module.ts","./src/app/pages/user/notifications/notifications.page.scss","./src/app/pages/user/notifications/notifications.page.ts"],"names":[],"mappings":"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","file":"default~notifications-notifications-module~pages-main-tab-main-tab-module~user-user-module.js","sourcesContent":["export default \"<ion-header  *ngIf=\\\"modalPage\\\">\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"closeModal()\\\"><ion-icon name=\\\"chevron-back-outline\\\"></ion-icon></ion-button>\\n    </ion-buttons>\\n    <ion-title>Notifications</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content *ngIf=\\\"userData && userData.user\\\">\\n  <!--Push Notifications-->\\n  <ion-item lines=\\\"none\\\" color=\\\"lightgrey\\\">Push Notifications</ion-item>\\n  <ion-item>\\n    <ion-label>Chat Messages</ion-label>\\n    <ion-select [(ngModel)]=\\\"UIpushNotifyUnreadChatMessages\\\" (ionChange)=\\\"saveChange('Push', $event)\\\" slot=\\\"end\\\">\\n      <ion-select-option value=\\\"none\\\">Off</ion-select-option>\\n      <ion-select-option value=\\\"instant\\\">Instant</ion-select-option>\\n      <!--<ion-select-option value=\\\"daily\\\">Daily</ion-select-option>-->\\n    </ion-select>\\n  </ion-item>\\n  <ion-item>\\n    <ion-label>System Messages</ion-label>\\n    <ion-select [(ngModel)]=\\\"UIpushNotifySystemMessages\\\" (ionChange)=\\\"saveChange('Push', $event)\\\" slot=\\\"end\\\">\\n      <ion-select-option value=\\\"none\\\">Off</ion-select-option>\\n      <ion-select-option value=\\\"instant\\\">Instant</ion-select-option>\\n      <!--<ion-select-option value=\\\"daily\\\">Daily</ion-select-option>-->\\n    </ion-select>\\n  </ion-item>\\n  <!--Email Notifications-->\\n  <ion-item lines=\\\"none\\\" color=\\\"lightgrey\\\">Email Notifications</ion-item>\\n  <ion-item>\\n    <ion-label>Chat Messages</ion-label>\\n    <ion-select [(ngModel)]=\\\"UIemailNotifyUnreadChatMessages\\\" (ionChange)=\\\"saveChange('Email', $event)\\\" slot=\\\"end\\\">\\n      <ion-select-option value=\\\"none\\\">Off</ion-select-option>\\n      <!--<ion-select-option value=\\\"instant\\\">Instant</ion-select-option>-->\\n      <ion-select-option value=\\\"daily\\\">Daily</ion-select-option>\\n    </ion-select>\\n  </ion-item>\\n  <ion-item>\\n    <ion-label>System Messages</ion-label>\\n    <ion-select [(ngModel)]=\\\"UIemailNotifySystemMessages\\\" (ionChange)=\\\"saveChange('Email', $event)\\\" slot=\\\"end\\\">\\n      <ion-select-option value=\\\"none\\\">Off</ion-select-option>\\n      <!--<ion-select-option value=\\\"instant\\\">Instant</ion-select-option>-->\\n      <ion-select-option value=\\\"daily\\\">Daily</ion-select-option>\\n    </ion-select>\\n  </ion-item>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NotificationsPage } from './notifications.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [NotificationsPage]\n})\nexport class NotificationsPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvbm90aWZpY2F0aW9ucy9ub3RpZmljYXRpb25zLnBhZ2Uuc2NzcyJ9 */\"","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport { UserData } from \"../../../services/user.service\";\nimport {ModalController} from \"@ionic/angular\";\nimport {Location} from \"@angular/common\";\n\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.page.html',\n  styleUrls: ['./notifications.page.scss'],\n})\nexport class NotificationsPage implements OnInit, OnDestroy {\n\n    @Input() modalPage: any;\n\n    subscriptions: any = {};\n    UIenabledPushNotification: boolean;\n    UIpushNotifyUnreadChatMessages: boolean;\n    UIpushNotifySystemMessages: boolean;\n    UIemailNotifyUnreadChatMessages: boolean;\n    UIemailNotifySystemMessages: boolean;\n\n    constructor(public userData: UserData,\n                private location: Location,\n                private modalCtrl: ModalController) { }\n\n    async ngOnInit() {\n        this.subscriptions['refreshUserStatus'] = this.userData.refreshUserStatus$.subscribe(this.refreshUserStatusHandler);\n    }\n\n    refreshUserStatusHandler = async () => {\n        if (this.userData && this.userData.user) {\n            await this.prepareUserSettings();\n        }\n        this.userData.splitPaneState = 'md';\n    };\n\n    async prepareUserSettings() {\n        this.UIpushNotifyUnreadChatMessages = this.userData.user.pushNotifyUnreadChatMessages;\n        this.UIpushNotifySystemMessages = this.userData.user.pushNotifySystemMessages;\n        this.UIemailNotifyUnreadChatMessages = this.userData.user.emailNotifyUnreadChatMessages;\n        this.UIemailNotifySystemMessages = this.userData.user.emailNotifySystemMessages;\n    }\n\n    async saveChange(type, event) {\n        if (type === 'Push') {\n            if (event.detail.value !== 'none') { // when toggling it on\n                await this.userData.checkPushNotification(); // if success, will send an event to refresh the userData.user\n            }\n        }\n        // save user notification settings\n        const userData = {\n            pushNotifyUnreadChatMessages: this.UIpushNotifyUnreadChatMessages,\n            pushNotifySystemMessages: this.UIpushNotifySystemMessages,\n            emailNotifyUnreadChatMessages: this.UIemailNotifyUnreadChatMessages,\n            emailNotifySystemMessages: this.UIemailNotifySystemMessages\n        };\n        await this.userData.update(userData);\n    }\n\n    async togglePushNotification() {\n        if (this.userData && this.userData.user) {\n            if (this.UIenabledPushNotification) { // when toggling it on\n                const result = await this.userData.checkPushNotification(); // if success, will send an event to refresh the userData.user\n                if (!result) {\n                    this.UIenabledPushNotification = false;\n                }\n            }\n        }\n    }\n\n    closeModal() {\n        if (this.modalPage) {\n            this.modalCtrl.dismiss();\n        } else {\n            this.location.back();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions['refreshUserStatus'].unsubscribe(this.refreshUserStatusHandler);\n    }\n}\n"],"sourceRoot":"webpack:///"}